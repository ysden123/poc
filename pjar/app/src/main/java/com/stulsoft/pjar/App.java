/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.stulsoft.pjar;

import java.net.JarURLConnection;
import java.net.URL;
import java.util.Map;
import java.util.Objects;
import java.util.jar.Attributes;
import java.util.jar.Manifest;

public class App {
    private static final String DEFAULT_PROPERTY_VALUE = "Unavalable";

    public String getGreeting() {
        return "Hello World!";
    }

    public void showManifest() {
        String className = getClass().getSimpleName() + ".class";
        try {
            String classPath = Objects.requireNonNull(getClass().getResource(className)).toString();
            System.out.printf("classPath: %s%n", classPath);
            if (!classPath.startsWith("jar")) {
                System.out.println(DEFAULT_PROPERTY_VALUE);
                return;
            }
            URL url = new URL(classPath);
            JarURLConnection jarConnection = (JarURLConnection) url.openConnection();
            Manifest manifest = jarConnection.getManifest();
            Attributes attributes = manifest.getMainAttributes();
            for (Map.Entry<Object, Object> entry : attributes.entrySet()) {
                System.out.printf("attr: %s, value: %s%n", entry.getKey().toString(), entry.getValue().toString());
            }
        } catch (Exception exception) {
            System.out.println(DEFAULT_PROPERTY_VALUE);
            exception.printStackTrace();
        }
    }

    public void showImplementationVersion() {
        String className = getClass().getSimpleName() + ".class";
        try {
            String version;
            String classPath = Objects.requireNonNull(getClass().getResource(className)).toString();
            System.out.printf("classPath: %s%n", classPath);
            if (!classPath.startsWith("jar")) {
                version = DEFAULT_PROPERTY_VALUE;
            } else {
                URL url = new URL(classPath);
                JarURLConnection jarConnection = (JarURLConnection) url.openConnection();
                Manifest manifest = jarConnection.getManifest();
                Attributes attributes = manifest.getMainAttributes();
                version = attributes.getValue("Implementation-Version");
                if (version == null) {
                    version = DEFAULT_PROPERTY_VALUE;
                }
            }
            System.out.printf("Version: %s%n", version);
        } catch (Exception exception) {
            System.out.println(DEFAULT_PROPERTY_VALUE);
            exception.printStackTrace();
        }
    }

    public static void main(String[] args) {
        var app = new App();
        app.showManifest();
        app.showImplementationVersion();
    }
}
